#include "StopOrderMonitor.h"

void StopOrderMonitor::stopMonitorThread(Market *oMarket)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-13-1--72469725:1292cfe5a46:-8000:0000000000000E4E begin
{
	OrderList *buyStopList = (OrderList *) oMarket->buyStopList;
	OrderList *sellStopList = (OrderList *) oMarket->sellStopList;
	OrderList *marketBuyList = (OrderList *) oMarket->marketBuyList;
	OrderList *marketSellList = (OrderList *) oMarket->marketSellList;
	OrderList *buyLimitList = (OrderList *) oMarket->buyLimitList;
	OrderList *sellLimitList = (OrderList *) oMarket->sellLimitList;
	OrderList *activeQueue = (OrderList *) oMarket->activeQueue;

	Price *currentPrice = &oMarket->currentPrice;
	int marketPrice = -1;
	Order *temp;
	while (true) {
		marketPrice = currentPrice->waitPriceChange(marketPrice);
		//std::cout<<"Changed...";
		temp = buyStopList->peek(0, false);
		while (temp != 0 && temp->price1 < marketPrice) {
			Order *buyOrder = buyStopList->peek(0, true);
			//Cancelled
			if (buyOrder->status == STATUS_CANCELED) {
				oMarket->deleteOrder(buyOrder);
				continue;
			}
			//Convert & reroute
			buyOrder->price1 = buyOrder->price2;
			assert(buyOrder->action=='B');
			if (buyOrder->type == 'S') {
				buyOrder->type = 'M';
				marketBuyList->addOrder(buyOrder);
			} else {
				assert(buyOrder->type=='T');
				buyOrder->type = 'L';
				buyLimitList->addOrder(buyOrder);
			}

			activeQueue->addOrder(buyOrder);
			temp = buyStopList->peek(0, false);
		}

		temp = sellStopList->peek(0, false);
		while (temp != 0 && temp->price1 > marketPrice) {
			Order *sellOrder = sellStopList->peek(0, true);

			if (sellOrder->status == STATUS_CANCELED) {
				oMarket->deleteOrder(sellOrder);
				continue;
			}

			//Convert & reroute
			sellOrder->price1 = sellOrder->price2;
			assert(sellOrder->action=='S');
			if (sellOrder->type == 'S') {
				sellOrder->type = 'M';
				marketSellList->addOrder(sellOrder);
			} else {
				assert(sellOrder->type=='T');
				sellOrder->type = 'L';
				sellLimitList->addOrder(sellOrder);
			}

			activeQueue->addOrder(sellOrder);
			temp = sellStopList->peek(0, false);
		}

	}

}
// section -64--88-13-1--72469725:1292cfe5a46:-8000:0000000000000E4E end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element
